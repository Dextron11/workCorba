// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#ifndef ___upTime_h__
#define ___upTime_h__


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

class upTime;
typedef upTime* upTime_ptr;
typedef upTime* upTimeRef;

extern OB::TypeCodeConst _tc_upTime;

void OBDuplicate(upTime_ptr);
void OBRelease(upTime_ptr);

void OBMarshal(upTime_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(upTime_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< upTime > upTime_var;
typedef OB::ObjOut< upTime > upTime_out;

class OBStubImpl_upTime;
typedef OBStubImpl_upTime* OBStubImpl_upTime_ptr;

void OBDuplicate(OBStubImpl_upTime_ptr);
void OBRelease(OBStubImpl_upTime_ptr);

typedef OB::ObjVar< OBStubImpl_upTime > OBStubImpl_upTime_var;

//
// IDL:upTime:1.0
//
class upTime : virtual public ::CORBA::Object
{
    upTime(const upTime&);
    void operator=(const upTime&);

protected:

    static const char* ids_[];

public:

    upTime() { }
    virtual ~upTime() { }

    typedef upTime_ptr _ptr_type;
    typedef upTime_var _var_type;

    static inline upTime_ptr
    _duplicate(upTime_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline upTime_ptr
    _nil()
    {
        return 0;
    }

    static upTime_ptr _narrow(::CORBA::Object_ptr);
    static upTime_ptr _unchecked_narrow(::CORBA::Object_ptr);

    static upTime_ptr _narrow(::CORBA::AbstractBase_ptr);
    static upTime_ptr _unchecked_narrow(::CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:upTime/getUpTime:1.0
    //
    virtual void getUpTime(::CORBA::Float_out systemHasBeenUp,
                           ::CORBA::Float_out systemHasSpentIdle) = 0;
};

//
// IDL:upTime:1.0
//
class OBProxy_upTime : virtual public ::upTime,
                       virtual public OBCORBA::Object
{
    OBProxy_upTime(const OBProxy_upTime&);
    void operator=(const OBProxy_upTime&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_upTime() { }
    virtual ~OBProxy_upTime() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:upTime/getUpTime:1.0
    //
    void getUpTime(::CORBA::Float_out systemHasBeenUp,
                   ::CORBA::Float_out systemHasSpentIdle);
};

//
// IDL:upTime:1.0
//
class OBStubImpl_upTime : virtual public OB::StubImplBase
{
    OBStubImpl_upTime(const OBStubImpl_upTime&);
    void operator=(const OBStubImpl_upTime&);

protected:

    OBStubImpl_upTime() { }

public:

    static inline OBStubImpl_upTime_ptr
    _duplicate(OBStubImpl_upTime_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_upTime_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:upTime/getUpTime:1.0
    //
    virtual void getUpTime(::CORBA::Float_out systemHasBeenUp,
                           ::CORBA::Float_out systemHasSpentIdle) = 0;
};

//
// IDL:upTime:1.0
//
class OBMarshalStubImpl_upTime : 
    virtual public OBStubImpl_upTime,
    virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_upTime(const OBMarshalStubImpl_upTime&);
    void operator=(const OBMarshalStubImpl_upTime&);

protected:

    OBMarshalStubImpl_upTime() { }
    friend class OBProxy_upTime;

public:

    //
    // IDL:upTime/getUpTime:1.0
    //
    virtual void getUpTime(::CORBA::Float_out systemHasBeenUp,
                           ::CORBA::Float_out systemHasSpentIdle);
};

//
// IDL:upTime:1.0
//
namespace CORBA
{

inline void
release(::upTime_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::upTime_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_upTime_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_upTime_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(::CORBA::Any&, upTime_ptr*);
void operator<<=(::CORBA::Any&, upTime_ptr);
CORBA::Boolean operator>>=(const ::CORBA::Any&, upTime_ptr&);

inline void
operator<<=(::CORBA::Any_var& any, upTime_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(::CORBA::Any_var& any, upTime_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const ::CORBA::Any_var& any, upTime_ptr& val)
{
    return any.in() >>= val;
}

#endif
