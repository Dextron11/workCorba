// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2005
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.3.2

#ifndef ___upTime_skel_h__
#define ___upTime_skel_h__

#include "upTime.h"


#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4030200L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:upTime:1.0
//
class POA_upTime : virtual public PortableServer::ServantBase
{
    POA_upTime(const POA_upTime&);
    void operator=(const POA_upTime&);

protected:

    //
    // IDL:upTime/getUpTime:1.0
    //
    void _OB_op_getUpTime(OB::Upcall_ptr);

public:

    POA_upTime() { }

    virtual ::CORBA::Boolean _is_a(const char*)
        throw(::CORBA::SystemException);

    virtual ::CORBA::RepositoryId _primary_interface(
        const PortableServer::ObjectId&,
        PortableServer::POA_ptr);

    upTime_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(
        PortableServer::POA_ptr,
        const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:upTime/getUpTime:1.0
    //
    virtual void getUpTime(::CORBA::Float_out systemHasBeenUp,
                           ::CORBA::Float_out systemHasSpentIdle)
        throw(::CORBA::SystemException) = 0;
};

//
// IDL:upTime:1.0
//
class OBDirectStubImpl_upTime : virtual public OBStubImpl_upTime,
                                virtual public OB::DirectStubImpl
{
    OBDirectStubImpl_upTime(const OBDirectStubImpl_upTime&);
    void operator=(const OBDirectStubImpl_upTime&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    OBDirectStubImpl_upTime() { }

#endif

    OBDirectStubImpl_upTime(PortableServer::POA_ptr,
                            const PortableServer::ObjectId&,
                            PortableServer::ServantBase*);

    friend class POA_upTime;

public:

    //
    // IDL:upTime/getUpTime:1.0
    //
    virtual void getUpTime(::CORBA::Float_out systemHasBeenUp,
                           ::CORBA::Float_out systemHasSpentIdle);
};

#endif
